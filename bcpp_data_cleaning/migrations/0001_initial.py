# -*- coding: utf-8 -*-
# Generated by Django 1.11.7 on 2017-12-07 16:43
from __future__ import unicode_literals

import _socket
import django.core.validators
from django.db import migrations, models
import django_crypto_fields.fields.encrypted_char_field
import django_crypto_fields.fields.firstname_field
import django_crypto_fields.fields.identity_field
import django_crypto_fields.fields.lastname_field
import django_revision.revision_field
import edc_base.model_fields.hostname_modification_field
import edc_base.model_fields.userfield
import edc_base.model_fields.uuid_auto_field
import edc_base.model_validators.date
import edc_base.utils


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='CorrectConsent',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('subject_identifier', models.CharField(max_length=50, verbose_name='Subject Identifier')),
                ('consent_version', models.CharField(choices=[('1', 'V1'), ('2', 'V2'), ('3', 'V3'), ('4', 'V4'), ('5', 'V5')], max_length=3, null=True, verbose_name='Consent Version')),
                ('report_datetime', models.DateTimeField(null=True, validators=[edc_base.model_validators.date.datetime_not_future], verbose_name='Correction report date ad time')),
                ('old_identity', django_crypto_fields.fields.identity_field.IdentityField(blank=True, help_text="Use Omang, Passport number, driver's license number or Omang receipt number (Encryption: RSA local)", max_length=71, verbose_name='Identity number (OMANG, etc)')),
                ('new_identity', django_crypto_fields.fields.identity_field.IdentityField(blank=True, help_text="Use Omang, Passport number, driver's license number or Omang receipt number (Encryption: RSA local)", max_length=71, verbose_name='Identity number (OMANG, etc)')),
                ('old_first_name', django_crypto_fields.fields.firstname_field.FirstnameField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True)),
                ('new_first_name', django_crypto_fields.fields.firstname_field.FirstnameField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True)),
                ('old_last_name', django_crypto_fields.fields.lastname_field.LastnameField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True)),
                ('new_last_name', django_crypto_fields.fields.lastname_field.LastnameField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True)),
                ('old_initials', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[django.core.validators.RegexValidator(message='Ensure initials consist of letters only in upper case, no spaces.', regex='^[A-Z]{2,3}$')])),
                ('new_initials', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[django.core.validators.RegexValidator(message='Ensure initials consist of letters only in upper case, no spaces.', regex='^[A-Z]{2,3}$')])),
                ('old_dob', models.DateField(blank=True, help_text='Format is YYYY-MM-DD', null=True, verbose_name='Old Date of birth')),
                ('new_dob', models.DateField(blank=True, help_text='Format is YYYY-MM-DD', null=True, verbose_name='New Date of birth')),
                ('old_gender', models.CharField(blank=True, choices=[('M', 'Male'), ('F', 'Female'), ('U', 'Undetermined')], max_length=1, null=True)),
                ('new_gender', models.CharField(blank=True, choices=[('M', 'Male'), ('F', 'Female'), ('U', 'Undetermined')], max_length=1, null=True)),
                ('old_guardian_name', django_crypto_fields.fields.lastname_field.LastnameField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[django.core.validators.RegexValidator('^[A-Z]{1,50}\\, [A-Z]{1,50}$', "Invalid format. Format is 'LASTNAME, FIRSTNAME'. All uppercase separated by a comma")])),
                ('new_guardian_name', django_crypto_fields.fields.lastname_field.LastnameField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[django.core.validators.RegexValidator('^[A-Z]{1,50}\\, [A-Z]{1,50}$', "Invalid format. Format is 'LASTNAME, FIRSTNAME'. All uppercase separated by a comma")])),
                ('old_may_store_samples', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, null=True, verbose_name='Old Sample storage')),
                ('new_may_store_samples', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, null=True, verbose_name='New Sample storage')),
                ('old_is_literate', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, null=True, verbose_name='(Old) Is the participant LITERATE?')),
                ('new_is_literate', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, null=True, verbose_name='(New) Is the participant LITERATE?')),
                ('old_witness_name', django_crypto_fields.fields.lastname_field.LastnameField(blank=True, help_text="Required only if subject is illiterate. Format is 'LASTNAME, FIRSTNAME'. All uppercase separated by a comma (Encryption: RSA local)", max_length=71, null=True, validators=[django.core.validators.RegexValidator('^[A-Z]{1,50}\\, [A-Z]{1,50}$', "Invalid format. Format is 'LASTNAME, FIRSTNAME'. All uppercase separated by a comma")], verbose_name="Witness's Last and first name (illiterates only)")),
                ('new_witness_name', django_crypto_fields.fields.lastname_field.LastnameField(blank=True, help_text="Required only if subject is illiterate. Format is 'LASTNAME, FIRSTNAME'. All uppercase separated by a comma (Encryption: RSA local)", max_length=71, null=True, validators=[django.core.validators.RegexValidator('^[A-Z]{1,50}\\, [A-Z]{1,50}$', "Invalid format. Format is 'LASTNAME, FIRSTNAME'. All uppercase separated by a comma")], verbose_name="Witness's Last and first name (illiterates only)")),
            ],
        ),
        migrations.CreateModel(
            name='DeceasedMember',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('subject_identifier', models.CharField(max_length=50, verbose_name='Subject Identifier')),
                ('report_datetime', models.DateTimeField(null=True, validators=[edc_base.model_validators.date.datetime_not_future], verbose_name='Correction report date ad time')),
                ('time_point', models.CharField(choices=[('T0', 'T0'), ('T1', 'T1'), ('T2', 'T2')], max_length=3, null=True, verbose_name='Time point')),
                ('death_date', models.DateField(validators=[edc_base.model_validators.date.date_not_future], verbose_name='Date of Death:')),
                ('site_aware_date', models.DateField(validators=[edc_base.model_validators.date.date_not_future], verbose_name='Date site aware of Death:')),
                ('death_cause', models.TextField(blank=True, help_text='Note: Cardiac and pulmonary arrest are not major reasons and should not be used to describe major cause', max_length=1000, null=True, verbose_name='Describe the major cause of death(including pertinent autopsy information if available),starting with the first noticeable illness thought to be related to death,continuing to time of death. ')),
                ('duration_of_illness', models.IntegerField(default=0, help_text='in days', verbose_name='Duration of acute illness directly causing death (in days, or choose Unknown)?')),
                ('relationship_death_study', models.CharField(choices=[('Definitely not related', 'Definitely not related'), ('Probably not related', 'Probably not related'), ('Possible related', 'Possible related'), ('Probably related', 'Probably related'), ('Definitely related', 'Definitely related')], max_length=50, verbose_name='What is the relationship of the death to study participation?')),
            ],
        ),
        migrations.CreateModel(
            name='MovedMember',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('subject_identifier', models.CharField(max_length=50, verbose_name='Subject Identifier')),
                ('report_datetime', models.DateTimeField(null=True, validators=[edc_base.model_validators.date.datetime_not_future], verbose_name='Correction report date ad time')),
                ('time_point', models.CharField(choices=[('T0', 'T0'), ('T1', 'T1'), ('T2', 'T2')], max_length=3, null=True, verbose_name='Time point')),
                ('moved_household', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('unknown', 'Unknown')], max_length=7, null=True, verbose_name='Has the participant moved out of the household where last seen')),
                ('moved_community', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('unknown', 'Unknown')], max_length=7, null=True, verbose_name='Has the participant moved out of the community')),
                ('new_community', models.CharField(blank=True, help_text="If moved out of the community, provide a new community name or 'UNKNOWN'", max_length=50, null=True, verbose_name='If the participant has moved, provide the name of the new community')),
                ('update_locator', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('unknown', 'Unknown')], help_text='If YES, please enter the changed information the locator form', max_length=7, null=True, verbose_name='Has the locator information changed')),
                ('comment', models.TextField(blank=True, max_length=250, verbose_name='Comment')),
            ],
        ),
        migrations.AlterUniqueTogether(
            name='movedmember',
            unique_together=set([('subject_identifier', 'time_point')]),
        ),
        migrations.AlterUniqueTogether(
            name='deceasedmember',
            unique_together=set([('subject_identifier', 'time_point')]),
        ),
        migrations.AlterUniqueTogether(
            name='correctconsent',
            unique_together=set([('subject_identifier', 'consent_version')]),
        ),
    ]
